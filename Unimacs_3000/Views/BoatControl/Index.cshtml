@{
    ViewBag.Title = "Home Page";
}
<p id="controlMode"></p>
<div id="engineControlContainer">
    <div id="leftEngineParentContainer">
        <div id="leftEngineBarContainer_positive"></div>
        <div id="leftEngineBarContainer_negative"></div>
        <p id="progressBarlabel">Leftengine</p>
    </div>
    <div id="rightEngineParentContainer">
        <div id="rightEngineBarContainer_positive"></div>
        <div id="rightEngineBarContainer_negative"></div>
        <p id="progressBarlabel">Rightengine</p>
    </div>
</div>

<div id="rudderBarParentContainer">
    <div id="rudderBarContainer"></div>
    <p id="rudderBarlabel">Rudder</p>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        //Create 2 progressbars for each motor, because we need one for the positive values and one for the negative values
        //USING progressbar.js see : http://progressbarjs.readthedocs.io/en/latest/
        var leftEngineBar_positive = new ProgressBar.Line(leftEngineBarContainer_positive, {
            strokeWidth: 1,
            easing: 'easeInOut',
            duration: 500,
            color: '#000',
            trailColor: '#eee',
            trailWidth: 1,
            svgStyle: { width: '100%', height: '100%' },
            from: { color: '#ED6A5A' },
            to: { color: '#FFEA82' },
            step: (state, leftEngineBarContainer_positive) => {
                leftEngineBarContainer_positive.setText(Math.abs(leftEngineBarContainer_positive.value()));
                leftEngineBarContainer_positive.path.setAttribute('stroke', state.color);
            }
        });
        var leftEngineBar_negative = new ProgressBar.Line(leftEngineBarContainer_negative, {
            strokeWidth: 1,
            easing: 'easeInOut',
            duration: 500,
            color: '#000',
            trailColor: '#eee',
            trailWidth: 1,
            svgStyle: { width: '100%', height: '100%' },
            from: { color: '#FFEA82' },
            to: { color: '#FFEA82' },
            step: (state, leftEngineBarContainer_negative) => {
                leftEngineBarContainer_negative.setText(leftEngineBarContainer_negative.value());

                leftEngineBarContainer_negative.path.setAttribute('stroke', state.color);
            }
        });

        var rightEngineBar_positive = new ProgressBar.Line(rightEngineBarContainer_positive, {
            strokeWidth: 1,
            easing: 'easeInOut',
            duration: 500,
            color: '#000',
            trailColor: '#eee',
            trailWidth: 1,
            svgStyle: { width: '100%', height: '100%' },
            from: { color: '#ED6A5A' },
            to: { color: '#FFEA82' },
            step: (state, rightEngineBarContainer_positive) => {
                rightEngineBarContainer_positive.setText(Math.abs(rightEngineBarContainer_positive.value()));

                rightEngineBarContainer_positive.path.setAttribute('stroke', state.color);
            }
        });
        var rightEngineBar_negative = new ProgressBar.Line(rightEngineBarContainer_negative, {
            strokeWidth: 1,
            easing: 'easeInOut',
            duration: 500,
            color: '#000',
            trailColor: '#eee',
            trailWidth: 1,
            svgStyle: { width: '100%', height: '100%' },
            from: { color: '#FFEA82' },
            to: { color: '#FFEA82' },
            step: (state, rightEngineBarContainer_negative) => {
                rightEngineBarContainer_negative.setText(rightEngineBarContainer_negative.value());
                rightEngineBarContainer_negative.path.setAttribute('stroke', state.color);
            }
        });

        //Create a circular progressbar for the rudder
        var rudderBar = new ProgressBar.Circle(rudderBarContainer, {
            color: '#000',
            // This has to be the same size as the maximum width to
            // prevent clipping
            strokeWidth: 4,
            trailWidth: 1,
            trailColor: '#000',
            easing: 'easeInOut',
            duration: 1400,
            text: {
                autoStyleContainer: false
            },
            from: { color: '#ff00000', width: 4 },
            to: { color: '#ff00000', width: 4 },
            // Set default step function for all animate calls
            step: function (state, circle) {
                circle.path.setAttribute('stroke', state.color);
                circle.path.setAttribute('stroke-width', state.width);

                var value = circle.value();
                var valuePercentage = Math.abs(Math.round(value * 100))
                if (value >= 0) {
                    circle.setText('Starboard ' + valuePercentage + '%');
                } else {
                    circle.setText('Portside ' + valuePercentage + '%');
                }
            }
        });

        //Initial updateBoatControlData function call to start the polling
        updateBoatControlData(0, 0, 0);

        //This is the function that GETs data from the controller and updates the progressbar
        function updateBoatControlData() {
            var options = {};
            //set the options for the http request to the controller
            options.url = '@Url.Action("getBoatData", "BoatControl")';
            options.type = "GET";
            options.dataType = "json";
            options.success = function (response)
            {
                //get the values out of the response
                document.getElementById("controlMode").innerHTML = "Dummy"
                var leftEngineValue = response.left_engine_value;
                var rightEngineValue = response.right_engine_value;
                var rudderValue = response.rudder_value;
                //check if left engine value > 0 -> positive
                if (leftEngineValue > 0)
                {
                    //set the negative progress bar to zero
                    leftEngineBar_negative.set(0);
                    //Multiply positive leftenginevalue with -1 to make it zero, this is because the progress is rotated
                    leftEngineBar_positive.set(leftEngineValue * -1);
                }
                else
                {
                    //set the postive progress bar to zero
                    leftEngineBar_positive.set(0);
                    //Multiply negative leftengine value with -1 to make it positive
                    leftEngineBar_negative.set(leftEngineValue * -1);                    
                }
                //check if right engine value > 0 -> positive
                if (rightEngineValue > 0)
                {
                    rightEngineBar_negative.set(0);
                    rightEngineBar_positive.set(rightEngineValue * -1);
                }
                else
                {
                    rightEngineBar_positive.set(0);
                    rightEngineBar_negative.set(rightEngineValue * -1);
                }
                //set rudder value
                rudderBar.set(rudderValue);
                //call this function again -> polling with 100ms delay
                setTimeout(updateBoatControlData, 100);
            };
            options.error = function (xhr, status, error)
            {
                var err = eval("(" + xhr.responseText + ")");
                alert(err.Message);
            };
            //Do the get checkboatdata request
            $.ajax(options)
        }
    });
</script>